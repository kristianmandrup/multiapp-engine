require "thor/group"
require "active_support"
require "active_support/version"
require "active_support/core_ext/string"

require "rails/generators"
require "rails/generators/rails/app/app_generator"

require "sugar-high/file"
require 'fileutils'

class DummyApp < Thor::Group
  include Thor::Actions
  check_unknown_options!

  def self.source_root
    @_source_root ||= File.expand_path('../templates', __FILE__)
  end

  argument :types,  :type => :array, :default => [], :desc => "Dummy application names"

  class_option :test_framework, :default => "test_unit", :aliases => "-t",
                                :desc => "Test framework to use. test_unit or rspec."

  class_option :orms,       :type => :array, :default => [],
                                :desc => "Datastore frameworks to use. mongoid or active_record."


  class_option :tu,  :type => :boolean, :default => true,
                                :desc => "Skip testunit generation for dummy apps."

  class_option :js,  :type => :boolean, :default => true,
                                :desc => "Skip javascript generation for dummy apps."

  
  desc "Creates a Rails 3 engine with Rakefile, Gemfile and running tests."


  def invoke_rails_app_generators
    if !File.directory? "dummy-apps"
      say "xdummy must be run from the Rails application root or the test/rspec folder", :red
    end
    
    FileUtils.cd "dummy-apps"
    
    say "Vendoring Rails applications at #{test_path}/dummy-apps"
    types.each do |type|
      say "Creating #{type} apps"
      @current_type = type
      orms.each do |orm|
        @current_orm = translate(orm) 
        
        say "Creating dummy Rails app with #{orm}"
        invoke Rails::Generators::AppGenerator, app_args

        say "Configuring Rails app"
        change_config_files

        say "Removing unneeded files"
        remove_uneeded_rails_files
            
        send orm_config_method if respond_to?(orm_config_method)

        say "Configuring testing framework for #{orm}"      
        set_orm_helpers
        
        FileUtils.cd(destination_root)
      end
    end
  end

  protected

    attr_reader :current_orm, :current_type

    def 
      !File.directory? "dummy-apps"

    def translate orm
      case orm.to_sym
      when :ar
        'active_record'
      else
        orm
      end
    end

    def dummy_app_path
      File.expand_path(dummy_path, destination_root)
    end

    def dummy_app_name
      name = "dummy-#{current_orm}"
      name << "-#{current_type}" if current_type && !current_type.blank?
      name
    end

    def dummy_path
      "dummy-apps/#{dummy_app_name}"
    end

    def orms
      @orms ||= options[:orms] || ['active_record']
    end

    def set_orm_helpers
      say "Configuring testing files for #{current_orm} app"
      inside test_path do
        unless File.directory? dummy_app_integration_test_dir
          empty_directory dummy_app_integration_test_dir
        end
        if File.exist?(navigation_file) || File.exist?(underscored_file)
          say "Moving test files into /#{dummy_app_name}"
          move_test_files navigation_file, underscored_file
          inside dummy_app_name do
            replace_orm_in navigation_file
            replace_orm_in underscored_file
          end
        end
      end
    end

    def dummy_app_integration_test_dir
      "#{dummy_app_name}/integration"
    end

    def navigation_file
      "integration/navigation_#{test_ext}.rb"
    end

    def underscored_file
      "#{underscored}_#{test_ext}.rb"
    end

    def move_test_files *files
      files.each do |file|        
        FileUtils.mv(file, "#{dummy_app_name}/#{file}") if File.exist?(file)
      end
    end

    def replace_orm_in file
      return if !File.exist?(file)
      File.replace_content_from file, :where => '#orm#', :with => current_orm
    end

    def dummy_app_test_path
      File.join(dummy_app_path, test_path)
    end

    def orm_config_method
      "config_#{current_orm}"
    end

    def config_mongoid
      return if !current_orm == 'mongoid'

      say "Configuring app for #{current_orm}"
      inside dummy_app_path do
        gemfile = 'Gemfile'
        File.insert_into gemfile, :after => 'gem "sqlite3"' do 
         %q{gem "mongoid"
gem "bson_ext"
}
        end
        File.remove_content_from gemfile, :where => 'gem "sqlite3"'
        `bundle install`
        `rails g mongoid:config`
      end
    end

    def remove_uneeded_rails_files
      inside dummy_app_path do
        remove_file ".gitignore"
        # remove_file "db/seeds.rb"
        remove_file "doc"
        # remove_file "Gemfile"
        remove_file "lib/tasks"
        remove_file "public/images/rails.png"
        remove_file "public/index.html"
        remove_file "public/robots.txt"
        remove_file "README"
        remove_file "test"
        remove_file "vendor"
      end
    end

    def change_config_files
      store_application_definition!
      template "rails/boot.rb", "#{dummy_app_path}/config/boot.rb", :force => true
      template "rails/application.rb", "#{dummy_app_path}/config/application.rb", :force => true
    end
  
    def app_args
      args = [dummy_app_path, "-T"] # skip test unit
      args << "-T" if skip_testunit?
      args << "-J" if skip_javascript?      
      # skip active record is orm is set to another datastore      
      args << "-O" if !active_record?
      args
    end

    def active_record?
      !current_orm || ['active_record', 'ar'].include?(current_orm)
    end

    def skip_testunit?
      options[:tu]
    end

    def skip_javascript?
      options[:js]
    end

    def rspec?
      options[:test_framework] == "rspec"
    end

    def test_unit?
      options[:test_framework] == "test_unit"
    end

    def test_path
      rspec? ? "spec" : "test"
    end
    alias_method :test_ext, :test_path

    def self.banner
      self_task.formatted_usage(self, false)
    end

    def application_definition
      @application_definition ||= begin
        contents = File.read(File.expand_path("#{dummy_app_path}/config/application.rb", destination_root))
        contents[(contents.index("module Dummy"))..-1]
      end
    end
    alias :store_application_definition! :application_definition

    # Cache accessors since we are changing the directory
    def set_accessors!
      self.name
      self.class.source_root
    end

    def name
      @name ||= File.basename(destination_root)
    end

    def camelized
      @camelized ||= name.camelize
    end

    def underscored
      @underscored ||= name.underscore
    end
end
